#include "/Engine/Private/Common.ush"
#include "/Engine/Public/Platform.ush"

#define SOURCE_MAX_COUNT 5

float2 UVScale;

RWTexture3D<float> OutUAV;

Texture3D<float> VolumeTexture;
SamplerState VolumeSampler;



StructuredBuffer<float4> InDataBuffer;

float simple_distance_sum(float3 samplePosition)
{
    float value = 0;
    for (int i = 0; i < SOURCE_MAX_COUNT; ++i)
    {
        if (InDataBuffer[i].w >= 0)
        {
            float3 radisourcePos = float3(InDataBuffer[i].x, InDataBuffer[i].y, InDataBuffer[i].z);
            float distanceFactor = distance(radisourcePos, samplePosition);
            distanceFactor = pow(distanceFactor, 0.96f);
            if (distanceFactor > 0)
            {
                value += InDataBuffer[i].w / distanceFactor;
            }
        }
    }
    return clamp(value, 0, 1.0f);
}




[numthreads(32, 32, 1)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
    float3 pos = float3(0, 0, 0) + float3(500, 500, 500) * DispatchThreadId / 512.0f;
    float val = simple_distance_sum(pos);
    OutUAV[DispatchThreadId.xyz] = val;
}

